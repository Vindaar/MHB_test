* Simple example for the Modulhandbuch

This is a simple example of what the future Modulhandbuch might look
like. It's hosted using Github pages:

[[https://vindaar.github.io/MHB_test]]

The structure of each Modulhandbuch is simply represented in a tree of
directories containing Markdown files. An excerpt:
#+begin_src sh
basti at void in ~/src/tinyIap/staticExample/content/docs/mhb_bsphysik ツ tree
.                       
├── _index.md           
├── math140             
│   ├── _index.md       
│   └── math141         
│       └── _index.md   
├── math240             
│   ├── _index.md       
│   └── math241         
│       └── _index.md
├── math340             
│   ├── _index.md 
│   └── math341      
│       └── _index.md
├── physik110           
│   ├── _index.md       
│   ├── ph110.pdf    
│   ├── physik111       
│   │   └── _index.md   
│   └── physik112
│       └── _index.md
...
#+end_src

** Neat features

Just a few features I personally like, cause I would have enjoyed them
back when I was a student or things that could improve the module
handbook in some ways.

- working search functionality (yay!)
- multi language support for the full website, so one could in
  principle even offer e.g. the B.Sc. handbooks with English headers or the
  M.Sc. handbooks with German headers (and theoretically content of couse)
- KaTeX (similar to MathJax) for inline LaTeX equations (well,
  probably not too important for the module handbook, unless something
  in the descriptions)
- dark theme

** Some notes

Generate the table of contents from the database when converting to
generate something like the following table of content.

*UPDATE*: We do not even have to manually generate the sub trees. Only
the degrees have to be manually added. The rest is done automagically.
#+begin_src markdown
- [**B.Sc. Physik**]({{< relref "/docs/mhb_bsphysik" >}})
- [**M.Sc. Physics**]({{< relref "/docs/mhb_msphysik" >}})
  - [**Module**]({{< relref "/docs/module" >}})
    - [Modul 1]({{< relref "/docs/module/modul1" >}})
      - [Course 1.1]({{< relref "/docs/module/modul1/course1" >}})
      - [Course 1.2]({{< relref "/docs/module/modul1/course2" >}})
    - [Modul 2]({{< relref "/docs/module/modul1" >}})
      - [Course 2.1]({{< relref "/docs/module/modul1/course1" >}})
#+end_src
where the module / course pages are generated in the same way as the
PDF is currently.

Module / course structure is represented by the directory structure.

Each page has the actual content that is found in the PDF then.


PDF creation can be achieved reasonably well already with a default
=pandoc= call:
#+begin_src sh
pandoc _index.md -o <module>.pdf
#+end_src
will create a single PDF for a module, which looks really good. 
See number 14 here:

https://pandoc.org/demos.html

for an idea how we might generate a full handbook for all pages
(e.g. we walk the =content= directory and append the content of each
found markdown file to a single one and use a custom TeX header). With
that we should be able to generate a beautiful PDF, which can then be
injected with things like the page of the overview etc using
=pdfunite, pdftk= or similar.
